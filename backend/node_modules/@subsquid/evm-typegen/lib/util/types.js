"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getType = void 0;
function isStaticArray(param) {
    return param.type.match(/\[\d+]$/);
}
function isDynamicArray(param) {
    return param.type.endsWith('[]');
}
function elementsCount(param) {
    return Number(param.type.match(/\[(\d+)]$/)?.[1] ?? 0);
}
function arrayChildType(param) {
    return param.type.replace(/\[\d*]$/, '');
}
function getType(param, index) {
    const { name, ...namelessParam } = param;
    if (name) {
        return `"${name}": ${getType(namelessParam)}`;
    }
    if (index !== undefined) {
        return `"_${index}": ${getType(namelessParam)}`;
    }
    const { indexed, ...indexlessParam } = param;
    if (indexed) {
        return `indexed(${getType(indexlessParam)})`;
    }
    if (isStaticArray(param)) {
        const elements = elementsCount(param);
        return `p.fixedSizeArray(${getType({
            ...param,
            type: arrayChildType(param),
        })}, ${elements})`;
    }
    if (isDynamicArray(param)) {
        return `p.array(${getType({
            ...param,
            type: arrayChildType(param),
        })})`;
    }
    if (param.type === 'tuple') {
        return `p.struct({${param.components.map((type, idx) => getType(type, idx)).join(', ')}})`;
    }
    return `p.${param.type}`;
}
exports.getType = getType;
//# sourceMappingURL=types.js.map
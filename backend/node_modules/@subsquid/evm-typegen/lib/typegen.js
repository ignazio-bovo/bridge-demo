"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Typegen = void 0;
const util_internal_1 = require("@subsquid/util-internal");
const evm_abi_1 = require("@subsquid/evm-abi");
const types_1 = require("./util/types");
class Typegen {
    constructor(dest, abi, basename, log) {
        this.abi = abi;
        this.log = log;
        this.out = dest.file(basename + '.ts');
    }
    async generate() {
        this.out.line(`import * as p from '@subsquid/evm-codec'`);
        this.out.line(`import { event, fun, viewFun, indexed, ContractBase } from '@subsquid/evm-abi'`);
        this.out.line(`import type { EventParams as EParams, FunctionArguments, FunctionReturn } from '@subsquid/evm-abi'`);
        this.generateEvents();
        this.generateFunctions();
        this.generateContract();
        this.generateEventTypes();
        this.generateFunctionTypes();
        await this.out.write();
        this.log.info(`saved ${this.out.file}`);
    }
    generateEvents() {
        let events = this.getEvents();
        if (events.length == 0) {
            return;
        }
        this.out.line();
        this.out.block(`export const events =`, () => {
            for (let e of events) {
                this.out.line(`${this.getPropName(e)}: event("${this.topic0(e)}", "${this.signature(e)}", {${this.toTypes(e.inputs)}}),`);
            }
        });
    }
    topic0(e) {
        return `0x${(0, evm_abi_1.keccak256)(this.signature(e)).toString('hex')}`;
    }
    toTypes(inputs) {
        return inputs.map((input, idx) => (0, types_1.getType)(input, idx)).join(', ');
    }
    generateFunctions() {
        let functions = this.getFunctions();
        if (functions.length == 0) {
            return;
        }
        this.out.line();
        this.out.block(`export const functions =`, () => {
            for (let f of functions) {
                let returnType = '';
                if (f.outputs?.length === 1) {
                    returnType = (0, types_1.getType)({ ...f.outputs[0], name: undefined });
                }
                if (f.outputs?.length > 1) {
                    returnType = `{${this.toTypes(f.outputs)}}`;
                }
                const funType = f.stateMutability === 'view' || f.stateMutability === 'pure' ? 'viewFun' : 'fun';
                this.out.line(`${this.getPropName(f)}: ${funType}("${this.functionSelector(f)}", "${this.signature(f)}", {${this.toTypes(f.inputs)}}, ${returnType}),`);
            }
        });
    }
    functionSelector(f) {
        const sighash = this.signature(f);
        return `0x${(0, evm_abi_1.keccak256)(sighash).slice(0, 4).toString('hex')}`;
    }
    generateContract() {
        this.out.line();
        this.out.block(`export class Contract extends ContractBase`, () => {
            let functions = this.getFunctions();
            for (let f of functions) {
                if ((f.stateMutability === 'pure' || f.stateMutability === 'view') &&
                    f.outputs?.length) {
                    this.out.line();
                    let argNames = f.inputs.map((a, idx) => a.name || `_${idx}`);
                    const ref = this.getPropNameGetter(f);
                    const [argsType] = this.toFunctionTypes(f);
                    let args = f.inputs
                        .map((a, idx) => `${argNames[idx]}: ${argsType}["${argNames[idx]}"]`)
                        .join(', ');
                    this.out.block(`${this.getPropName(f)}(${args})`, () => {
                        this.out.line(`return this.eth_call(functions${ref}, {${argNames.join(', ')}})`);
                    });
                }
            }
        });
    }
    canonicalType(param) {
        if (!param.type.startsWith('tuple')) {
            return param.type;
        }
        const arrayBrackets = param.type.slice(5);
        return `(${param.components.map((param) => this.canonicalType(param))})${arrayBrackets}`;
    }
    signature(item) {
        return `${item.name}(${item.inputs
            .map((param) => this.canonicalType(param))
            .join(',')})`;
    }
    getPropName(item) {
        if (this.getOverloads(item) == 1) {
            return item.name;
        }
        else if (item.type === 'function') {
            return `'${this.signature(item)}'`;
        }
        else {
            return `'${item.name}(${item.inputs
                .map((param) => this.canonicalType(param) + (param.indexed ? ` indexed` : ``))
                .join(',')})'`;
        }
    }
    getPropNameGetter(item) {
        if (this.getOverloads(item) == 1) {
            return '.' + item.name;
        }
        else {
            return `[${this.getPropName(item)}]`;
        }
    }
    getOverloads(item) {
        if (item.type === 'event') {
            return this.eventOverloads()[item.name];
        }
        else {
            return this.functionOverloads()[item.name];
        }
    }
    capitalize(s) {
        return s.charAt(0).toUpperCase() + s.slice(1);
    }
    getOverloadIndex(item) {
        const abi = [...this.getEvents(), ...this.getFunctions()];
        const overloads = abi.filter((x) => x.name === item.name);
        return overloads.findIndex((x) => x === item);
    }
    toEventType(e) {
        if (this.getOverloads(e) === 1) {
            return `${this.capitalize(e.name)}EventArgs`;
        }
        const index = this.getOverloadIndex(e);
        return `${this.capitalize(e.name)}EventArgs_${index}`;
    }
    generateEventTypes() {
        const events = this.getEvents();
        if (events.length == 0) {
            return;
        }
        this.out.line();
        this.out.line(`/// Event types`);
        for (let e of events) {
            const propName = this.getPropNameGetter(e);
            this.out.line(`export type ${this.toEventType(e)} = EParams<typeof events${propName}>`);
        }
    }
    toFunctionTypes(f) {
        if (this.getOverloads(f) === 1) {
            return [`${this.capitalize(f.name)}Params`, `${this.capitalize(f.name)}Return`];
        }
        const index = this.getOverloadIndex(f);
        return [`${this.capitalize(f.name)}Params_${index}`, `${this.capitalize(f.name)}Return_${index}`];
    }
    generateFunctionTypes() {
        let functions = this.getFunctions();
        if (functions.length == 0) {
            return;
        }
        this.out.line();
        this.out.line(`/// Function types`);
        for (let f of functions) {
            const propName = this.getPropNameGetter(f);
            const [args, ret] = this.toFunctionTypes(f);
            this.out.line(`export type ${args} = FunctionArguments<typeof functions${propName}>`);
            this.out.line(`export type ${ret} = FunctionReturn<typeof functions${propName}>`);
            this.out.line();
        }
    }
    functionOverloads() {
        let overloads = {};
        for (let item of this.getFunctions()) {
            overloads[item.name] = (overloads[item.name] || 0) + 1;
        }
        return overloads;
    }
    eventOverloads() {
        let overloads = {};
        for (let item of this.getEvents()) {
            overloads[item.name] = (overloads[item.name] || 0) + 1;
        }
        return overloads;
    }
    getFunctions() {
        return this.abi.filter((f) => f.type === 'function');
    }
    getEvents() {
        return this.abi.filter((f) => f.type === 'event');
    }
}
exports.Typegen = Typegen;
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], Typegen.prototype, "functionOverloads", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], Typegen.prototype, "eventOverloads", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], Typegen.prototype, "getFunctions", null);
__decorate([
    util_internal_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], Typegen.prototype, "getEvents", null);
//# sourceMappingURL=typegen.js.map
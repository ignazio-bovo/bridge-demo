import { Codec } from '../codec';
import { Sink } from '../sink';
import { Src } from '../src';
export declare class ArrayCodec<const TIn, const TOut> implements Codec<readonly TIn[], readonly TOut[]> {
    readonly item: Codec<TIn, TOut>;
    readonly isDynamic = true;
    readonly baseType = "array";
    constructor(item: Codec<TIn, TOut>);
    encode(sink: Sink, val: TIn[]): void;
    decode(src: Src): TOut[];
}
export declare class FixedSizeArrayCodec<const TIn, const TOut> implements Codec<readonly TIn[], readonly TOut[]> {
    readonly item: Codec<TIn, TOut>;
    readonly size: number;
    readonly baseType = "array";
    isDynamic: boolean;
    slotsCount: number;
    constructor(item: Codec<TIn, TOut>, size: number);
    encode(sink: Sink, val: TIn[]): void;
    private encodeDynamic;
    decode(src: Src): TOut[];
    private decodeDynamic;
}
//# sourceMappingURL=array.d.ts.map
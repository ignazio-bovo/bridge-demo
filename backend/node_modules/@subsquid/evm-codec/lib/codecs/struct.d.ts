import { Codec, Struct, DecodedStruct, EncodedStruct } from '../codec';
import { Sink } from '../sink';
import { Src } from '../src';
export declare class StructCodec<const T extends Struct> implements Codec<EncodedStruct<T>, DecodedStruct<T>> {
    readonly baseType = "struct";
    readonly isDynamic: boolean;
    readonly slotsCount: number;
    private readonly childrenSlotsCount;
    private readonly components;
    constructor(components: T);
    encode(sink: Sink, val: EncodedStruct<T>): void;
    private encodeDynamic;
    decode(src: Src): DecodedStruct<T>;
    private decodeDynamic;
}
//# sourceMappingURL=struct.d.ts.map
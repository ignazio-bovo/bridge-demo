/// <reference types="node" />
export declare class Sink {
    #private;
    private pos;
    private buf;
    private view;
    private stack;
    constructor(fields: number, capacity?: number);
    result(): Buffer;
    toString(): string;
    reserve(additional: number): void;
    size(): number;
    private _allocate;
    private checkNumberBounds;
    u8(val: number): void;
    i8(val: number): void;
    u16(val: number): void;
    i16(val: number): void;
    u32(val: number): void;
    i32(val: number): void;
    u64(val: bigint): void;
    i64(val: bigint): void;
    u128(val: bigint): void;
    i128(val: bigint): void;
    u256(val: bigint): void;
    i256(val: bigint): void;
    bytes(val: Uint8Array): void;
    staticBytes(len: number, val: Uint8Array): void;
    address(val: string): void;
    string(val: string): void;
    bool(val: boolean): void;
    /**
     * @example
     * @link [Solidity docs](https://docs.soliditylang.org/en/latest/abi-spec.html#use-of-dynamic-types)
     */
    newStaticDataArea(slotsCount?: number): void;
    newDynamicDataArea(slotsCount: number): void;
    private currentDataAreaStart;
    increaseCurrentDataAreaSize(amount: number): void;
    private pushDataArea;
    endCurrentDataArea(): void;
}
//# sourceMappingURL=sink.d.ts.map
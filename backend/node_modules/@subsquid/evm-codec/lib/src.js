"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Src_instances, _Src_u64, _Src_i64, _Src_u128, _Src_i128;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Src = void 0;
const codec_1 = require("./codec");
class Src {
    constructor(buf) {
        _Src_instances.add(this);
        this.buf = buf;
        this.pos = 0;
        this.oldPos = 0;
        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
    }
    slice(start, end) {
        return new Src(this.buf.subarray(start, end));
    }
    u8() {
        this.pos += codec_1.WORD_SIZE - 1;
        let val = this.view.getUint8(this.pos);
        this.pos += 1;
        return val;
    }
    i8() {
        return Number(this.i256());
    }
    u16() {
        this.pos += codec_1.WORD_SIZE - 2;
        let val = this.view.getUint16(this.pos, false);
        this.pos += 2;
        return val;
    }
    i16() {
        return Number(this.i256());
    }
    u32() {
        this.pos += codec_1.WORD_SIZE - 4;
        let val = this.view.getUint32(this.pos, false);
        this.pos += 4;
        return val;
    }
    i32() {
        return Number(this.i256());
    }
    u64() {
        this.pos += codec_1.WORD_SIZE - 8;
        return __classPrivateFieldGet(this, _Src_instances, "m", _Src_u64).call(this);
    }
    i64() {
        this.pos += codec_1.WORD_SIZE - 8;
        return __classPrivateFieldGet(this, _Src_instances, "m", _Src_i64).call(this);
    }
    u128() {
        this.pos += codec_1.WORD_SIZE - 16;
        return __classPrivateFieldGet(this, _Src_instances, "m", _Src_u128).call(this);
    }
    i128() {
        this.pos += codec_1.WORD_SIZE - 16;
        return __classPrivateFieldGet(this, _Src_instances, "m", _Src_i128).call(this);
    }
    u256() {
        let hi = __classPrivateFieldGet(this, _Src_instances, "m", _Src_u128).call(this);
        let lo = __classPrivateFieldGet(this, _Src_instances, "m", _Src_u128).call(this);
        return lo + (hi << 128n);
    }
    i256() {
        let hi = __classPrivateFieldGet(this, _Src_instances, "m", _Src_i128).call(this);
        let lo = __classPrivateFieldGet(this, _Src_instances, "m", _Src_u128).call(this);
        return lo + (hi << 128n);
    }
    address() {
        return '0x' + this.u256().toString(16).padStart(40, '0');
    }
    bytes() {
        const ptr = this.u32();
        this.safeJump(ptr, 'bytes');
        const len = Number(this.u256());
        this.assertLength(len, 'bytes');
        const val = this.buf.subarray(this.pos, this.pos + len);
        this.jumpBack();
        return val;
    }
    staticBytes(len) {
        if (len > 32) {
            throw new Error(`bytes${len} is not a valid type`);
        }
        const val = this.buf.subarray(this.pos, this.pos + len);
        this.pos += codec_1.WORD_SIZE;
        return val;
    }
    string() {
        const ptr = this.u32();
        this.safeJump(ptr, 'string');
        const len = Number(this.u256());
        this.assertLength(len, 'string');
        const val = Buffer.from(this.buf.buffer, this.buf.byteOffset + this.pos, len).toString('utf-8');
        this.jumpBack();
        return val;
    }
    bool() {
        return !!this.u8();
    }
    assertLength(len, typeName) {
        if (this.buf.length - this.pos < len) {
            throw new RangeError(`Unexpected end of input. Attempting to read ${typeName} of length ${len} from 0x${Buffer.from(this.buf).toString('hex')}`);
        }
    }
    safeJump(pos, typeName) {
        if (pos < 0 || pos >= this.buf.length) {
            throw new RangeError(`Unexpected pointer location: 0x${pos.toString(16)}. Attempting to read ${typeName} from 0x${Buffer.from(this.buf).toString('hex')}`);
        }
        this.oldPos = this.pos;
        this.pos = pos;
    }
    jumpBack() {
        this.pos = this.oldPos;
    }
}
exports.Src = Src;
_Src_instances = new WeakSet(), _Src_u64 = function _Src_u64() {
    let val = this.view.getBigUint64(this.pos, false);
    this.pos += 8;
    return val;
}, _Src_i64 = function _Src_i64() {
    let val = this.view.getBigInt64(this.pos, false);
    this.pos += 8;
    return val;
}, _Src_u128 = function _Src_u128() {
    let hi = __classPrivateFieldGet(this, _Src_instances, "m", _Src_u64).call(this);
    let lo = __classPrivateFieldGet(this, _Src_instances, "m", _Src_u64).call(this);
    return lo + (hi << 64n);
}, _Src_i128 = function _Src_i128() {
    let hi = __classPrivateFieldGet(this, _Src_instances, "m", _Src_i64).call(this);
    let lo = __classPrivateFieldGet(this, _Src_instances, "m", _Src_u64).call(this);
    return lo + (hi << 64n);
};
//# sourceMappingURL=src.js.map
import type { AbiFunction } from './abi-components/function';
import type { Codec, Struct, EncodedStruct } from '@subsquid/evm-codec';
export interface Chain {
    client: {
        call: <T = any>(method: string, params?: unknown[]) => Promise<T>;
    };
}
export interface ChainContext {
    _chain: Chain;
}
export interface BlockContext {
    _chain: Chain;
    block: Block;
}
export interface Block {
    height: number;
}
export declare class ContractBase {
    private readonly _chain;
    private readonly blockHeight;
    readonly address: string;
    constructor(ctx: BlockContext, address: string);
    constructor(ctx: ChainContext, block: Block, address: string);
    /**
     * Call a contract function using eth_call with the given calldata.
     * Might be necessary to override for some chains.
     */
    private rpc_call;
    eth_call<const T extends Struct, const R extends Codec<any> | Struct | undefined>(func: AbiFunction<T, R>, args: EncodedStruct<T>): Promise<R extends Codec<any, infer U> ? U : R extends Struct ? { [K_1 in keyof { [K in keyof R]: R[K] extends Codec<any, infer U_1> ? U_1 : never; }]: { [K in keyof R]: R[K] extends Codec<any, infer U_1> ? U_1 : never; }[K_1]; } : void>;
}
//# sourceMappingURL=contract-base.d.ts.map
export declare class DecodingError extends Error {
    readonly name = "DecodingError";
}
export declare class EventTopicCountMismatchError extends DecodingError {
    constructor({ count, targetCount }: {
        count: number;
        targetCount: number;
    });
}
export declare class EventEmptyTopicsError extends DecodingError {
    constructor();
}
export declare class EventInvalidSignatureError extends DecodingError {
    constructor({ sig, targetSig }: {
        sig: string;
        targetSig: string;
    });
}
export declare class FunctionInvalidSignatureError extends DecodingError {
    constructor({ sig, targetSig }: {
        sig: string;
        targetSig: string;
    });
}
export declare class EventDecodingError extends Error {
    constructor(signature: string, argumentName: string, data: string, message: any);
}
export declare class UnexpectedFunctionError extends Error {
    constructor(expectedSignature: string, gotSignature: string);
}
export declare class FunctionCalldataDecodeError extends Error {
    constructor(functionSignature: string, argumentName: string, message: string, data: string);
}
export declare class FunctionResultDecodeError extends Error {
    constructor(functionSignature: string, argumentName: string, message: string, data: string);
}
//# sourceMappingURL=errors.d.ts.map
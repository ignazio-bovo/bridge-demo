"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionResultDecodeError = exports.FunctionCalldataDecodeError = exports.UnexpectedFunctionError = exports.EventDecodingError = exports.FunctionInvalidSignatureError = exports.EventInvalidSignatureError = exports.EventEmptyTopicsError = exports.EventTopicCountMismatchError = exports.DecodingError = void 0;
class DecodingError extends Error {
    constructor() {
        super(...arguments);
        this.name = 'DecodingError';
    }
}
exports.DecodingError = DecodingError;
class EventTopicCountMismatchError extends DecodingError {
    constructor({ count, targetCount }) {
        super(`Topic count mismatch. Expected ${targetCount} topics, but received ${count}.`);
    }
}
exports.EventTopicCountMismatchError = EventTopicCountMismatchError;
class EventEmptyTopicsError extends DecodingError {
    constructor() {
        super(`Cannot extract event signature from empty topics.`);
    }
}
exports.EventEmptyTopicsError = EventEmptyTopicsError;
class EventInvalidSignatureError extends DecodingError {
    constructor({ sig, targetSig }) {
        super(`Invalid event signature. Expected "${targetSig}", but received ${sig}.`);
    }
}
exports.EventInvalidSignatureError = EventInvalidSignatureError;
class FunctionInvalidSignatureError extends DecodingError {
    constructor({ sig, targetSig }) {
        super(`Invalid function signature. Expected "${targetSig}", but received ${sig}.`);
    }
}
exports.FunctionInvalidSignatureError = FunctionInvalidSignatureError;
class EventDecodingError extends Error {
    constructor(signature, argumentName, data, message) {
        super(`Error decoding argument ${argumentName} of event ${signature}:\n\n${data}\n\n${message}`);
        this.name = 'EventDecodingError';
    }
}
exports.EventDecodingError = EventDecodingError;
class UnexpectedFunctionError extends Error {
    constructor(expectedSignature, gotSignature) {
        super(`unexpected function signature. Expected: ${expectedSignature}, got: ${gotSignature}`);
        this.name = 'UnexpectedFunctionError';
    }
}
exports.UnexpectedFunctionError = UnexpectedFunctionError;
class FunctionCalldataDecodeError extends Error {
    constructor(functionSignature, argumentName, message, data) {
        super(`Error decoding argument ${argumentName} of function ${functionSignature}:\n\n${data}\n\n${message}`);
        this.name = 'FunctionCalldataDecodeError';
    }
}
exports.FunctionCalldataDecodeError = FunctionCalldataDecodeError;
class FunctionResultDecodeError extends Error {
    constructor(functionSignature, argumentName, message, data) {
        super(`Error decoding return argument ${argumentName} of function ${functionSignature}:\n\n${data}\n\n${message}`);
        this.name = 'FunctionResultDecodeError';
    }
}
exports.FunctionResultDecodeError = FunctionResultDecodeError;
//# sourceMappingURL=errors.js.map
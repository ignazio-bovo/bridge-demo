"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractBase = void 0;
class ContractBase {
    constructor(ctx, blockOrAddress, address) {
        this._chain = ctx._chain;
        if (typeof blockOrAddress === 'string') {
            this.blockHeight = ctx.block.height;
            this.address = blockOrAddress;
        }
        else {
            if (address == null) {
                throw new Error('missing contract address');
            }
            this.blockHeight = blockOrAddress.height;
            this.address = address;
        }
    }
    /**
     * Call a contract function using eth_call with the given calldata.
     * Might be necessary to override for some chains.
     */
    async rpc_call(calldata) {
        return this._chain.client.call('eth_call', [
            { to: this.address, data: calldata },
            '0x' + this.blockHeight.toString(16),
        ]);
    }
    async eth_call(func, args) {
        const data = func.encode(args);
        const result = await this.rpc_call(data);
        return func.decodeResult(result);
    }
}
exports.ContractBase = ContractBase;
//# sourceMappingURL=contract-base.js.map
import type { Simplify } from '../indexed';
import { type Codec, type DecodedStruct, type Struct } from '@subsquid/evm-codec';
export interface EventRecord {
    topics: string[];
    data: string;
}
type EventArgs = {
    [key: string]: Codec<any> & {
        indexed?: boolean;
    };
};
export type IndexedCodecs<T extends EventArgs> = Simplify<{
    [K in keyof T]: T[K] extends {
        indexed: true;
        isDynamic: true;
    } ? Codec<Uint8Array | string, string> & {
        isDynamic: true;
        indexed: true;
    } : T[K];
}>;
export type EventParams<T extends AbiEvent<any>> = T extends AbiEvent<infer U> ? DecodedStruct<U> : never;
export declare class AbiEvent<const T extends EventArgs> {
    readonly topic: string;
    readonly signature: string;
    readonly params: IndexedCodecs<T>;
    private readonly topicCount;
    constructor(topic: string, signature: string, args: T);
    is(rec: EventRecord): boolean;
    decode(rec: EventRecord): DecodedStruct<IndexedCodecs<T>>;
    private checkSignature;
    private checkTopicsCount;
}
export declare const event: <const T extends Struct>(topic: string, signature: string, args: T) => AbiEvent<T>;
export {};
//# sourceMappingURL=event.d.ts.map
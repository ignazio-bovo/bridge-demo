package messages

import (
	"fmt"

	btss "github.com/bnb-chain/tss-lib/tss"
	"github.com/libp2p/go-libp2p/core/peer"
)

// KIMAChainTSSMessageType  represent the messgae type used in KIMAChain TSS
type DaturaTSSMessageType uint64

const (
	// TSSKeygenMsg is the message directly generated by tss-lib package
	TSSKeygenMsg DaturaTSSMessageType = iota
	// TSSKeyresharingMsgOld is the message directly generated by tss lib for key re sharing - old committte
	TSSKeyresharingMsgOld
	// TSSKeyresharingMsgNew is the message directly generated by tss lib for key re sharing - new committe
	TSSKeyresharingMsgNew
	// TSSKeyresharingVerMsg is the message directly generated by tss lib for key re sharing version
	TSSKeyresharingVerMsg
	// TSSKeysignMsg is the message directly generated by tss lib for sign
	TSSKeysignMsg
	// TSSKeygenVerMsg is the message we create on top to make sure everyone received the same message
	TSSKeygenVerMsg
	// TSSKeysignVerMsg is the message we create to make sure every party receive the same broadcast message
	TSSKeysignVerMsg
	// TSSEcdsaPartMsg is the message with part of ecdsa key
	TSSEcdsaPartMsg
	// TSSEcdsaPartVerMsg is the message with part of ecdsa key
	TSSEcdsaPartVerMsg
	// TSSControlMsg
	TSSControlMsg
	// TSSTaskDone is the message of Tss process notification
	TSSTaskDone
	// Unknown is the message indicates the undefined message type
	Unknown
)

// String implement fmt.Stringer
func (msgType *DaturaTSSMessageType) String() string {
	switch *msgType {
	case TSSKeygenMsg:
		return "TSSKeygenMsg"
	case TSSKeysignMsg:
		return "TSSKeysignMsg"
	case TSSKeyresharingMsgOld:
		return "TSSKeyresharingMsgOld"
	case TSSKeyresharingMsgNew:
		return "TSSKeyresharingMsgNew"
	case TSSKeygenVerMsg:
		return "TSSKeygenVerMsg"
	case TSSKeysignVerMsg:
		return "TSSKeysignVerMsg"
	case TSSKeyresharingVerMsg:
		return "TSSKeyresharingVerMsg"
	case TSSEcdsaPartMsg:
		return "TSSEcdsaPartMsg"
	case TSSEcdsaPartVerMsg:
		return "TSSEcdsaPartVerMsg"
	case TSSControlMsg:
		return "TSSControlMsg"
	case TSSTaskDone:
		return "TSSTaskDone"
	default:
		return "Unknown"
	}
}

// WrappedMessage is a message with type in it
type WrappedMessage struct {
	MessageType DaturaTSSMessageType `json:"message_type"`
	MsgID       string               `json:"message_id"`
	Payload     []byte               `json:"payload"`
	HandleID    uint64               `json:"handl_id"`
}

// BroadcastMsgChan is the channel structure for keygen/keysign submit message to p2p network
type BroadcastMsgChan struct {
	WrappedMessage WrappedMessage
	PeersID        []peer.ID
}

// BroadcastConfirmMessage is used to broadcast to all parties what message they receive
type BroadcastConfirmMessage struct {
	P2PID string `json:"P2PID"`
	Key   string `json:"key"`
	Hash  string `json:"hash"`
}

// WireMessage the message that produced by tss-lib package
type WireMessage struct {
	Routing   *btss.MessageRouting `json:"routing"`
	RoundInfo string               `json:"round_info"`
	Message   []byte               `json:"message"`
	Sig       []byte               `json:"signature"`
}

// GetCacheKey return the key we used to cache it locally
func (m *WireMessage) GetCacheKey() string {
	return fmt.Sprintf("%s-%s", m.Routing.From.Id, m.RoundInfo)
}

type TssControl struct {
	ReqHash     string               `json:"reqest_hash"`
	ReqKey      string               `json:"request_key"`
	RequestType DaturaTSSMessageType `json:"request_type"`
	Msg         *WireMessage         `json:"message_body"`
}

type TssTaskNotifier struct {
	TaskDone bool `json:"task_done"`
}

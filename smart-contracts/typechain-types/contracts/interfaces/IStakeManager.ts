/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IStakeManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addBridgeParticipantReward"
      | "removeBridgeParticipantReward"
      | "stake"
      | "unstake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FundsStakedOnPrecompile"
      | "TokensStaked"
      | "TokensUnstaked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addBridgeParticipantReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBridgeParticipantReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBridgeParticipantReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBridgeParticipantReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
}

export namespace FundsStakedOnPrecompileEvent {
  export type InputTuple = [
    amount: BigNumberish,
    lastStakingBlock: BigNumberish,
    stakingEpochId: BigNumberish
  ];
  export type OutputTuple = [
    amount: bigint,
    lastStakingBlock: bigint,
    stakingEpochId: bigint
  ];
  export interface OutputObject {
    amount: bigint;
    lastStakingBlock: bigint;
    stakingEpochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensStakedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensUnstakedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IStakeManager extends BaseContract {
  connect(runner?: ContractRunner | null): IStakeManager;
  waitForDeployment(): Promise<this>;

  interface: IStakeManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBridgeParticipantReward: TypedContractMethod<
    [rewardAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  removeBridgeParticipantReward: TypedContractMethod<
    [rewardAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<
    [amount: BigNumberish, user: AddressLike],
    [void],
    "payable"
  >;

  unstake: TypedContractMethod<
    [amount: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBridgeParticipantReward"
  ): TypedContractMethod<[rewardAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeBridgeParticipantReward"
  ): TypedContractMethod<[rewardAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [amount: BigNumberish, user: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<
    [amount: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FundsStakedOnPrecompile"
  ): TypedContractEvent<
    FundsStakedOnPrecompileEvent.InputTuple,
    FundsStakedOnPrecompileEvent.OutputTuple,
    FundsStakedOnPrecompileEvent.OutputObject
  >;
  getEvent(
    key: "TokensStaked"
  ): TypedContractEvent<
    TokensStakedEvent.InputTuple,
    TokensStakedEvent.OutputTuple,
    TokensStakedEvent.OutputObject
  >;
  getEvent(
    key: "TokensUnstaked"
  ): TypedContractEvent<
    TokensUnstakedEvent.InputTuple,
    TokensUnstakedEvent.OutputTuple,
    TokensUnstakedEvent.OutputObject
  >;

  filters: {
    "FundsStakedOnPrecompile(uint256,uint64,uint64)": TypedContractEvent<
      FundsStakedOnPrecompileEvent.InputTuple,
      FundsStakedOnPrecompileEvent.OutputTuple,
      FundsStakedOnPrecompileEvent.OutputObject
    >;
    FundsStakedOnPrecompile: TypedContractEvent<
      FundsStakedOnPrecompileEvent.InputTuple,
      FundsStakedOnPrecompileEvent.OutputTuple,
      FundsStakedOnPrecompileEvent.OutputObject
    >;

    "TokensStaked(address,uint256)": TypedContractEvent<
      TokensStakedEvent.InputTuple,
      TokensStakedEvent.OutputTuple,
      TokensStakedEvent.OutputObject
    >;
    TokensStaked: TypedContractEvent<
      TokensStakedEvent.InputTuple,
      TokensStakedEvent.OutputTuple,
      TokensStakedEvent.OutputObject
    >;

    "TokensUnstaked(address,uint256)": TypedContractEvent<
      TokensUnstakedEvent.InputTuple,
      TokensUnstakedEvent.OutputTuple,
      TokensUnstakedEvent.OutputObject
    >;
    TokensUnstaked: TypedContractEvent<
      TokensUnstakedEvent.InputTuple,
      TokensUnstakedEvent.OutputTuple,
      TokensUnstakedEvent.OutputObject
    >;
  };
}

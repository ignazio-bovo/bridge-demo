/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IBridge {
  export type TokenInfoStruct = {
    tokenAddress: AddressLike;
    managed: boolean;
    enabled: boolean;
    supported: boolean;
  };

  export type TokenInfoStructOutput = [
    tokenAddress: string,
    managed: boolean,
    enabled: boolean,
    supported: boolean
  ] & {
    tokenAddress: string;
    managed: boolean;
    enabled: boolean;
    supported: boolean;
  };

  export type TokenMetadataStruct = {
    name: string;
    symbol: string;
    decimals: BigNumberish;
  };

  export type TokenMetadataStructOutput = [
    name: string,
    symbol: string,
    decimals: bigint
  ] & { name: string; symbol: string; decimals: bigint };

  export type TransferRequestStruct = {
    nonce: BigNumberish;
    from: AddressLike;
    to: AddressLike;
    tokenKey: BytesLike;
    amount: BigNumberish;
    srcChainId: BigNumberish;
    destChainId: BigNumberish;
  };

  export type TransferRequestStructOutput = [
    nonce: bigint,
    from: string,
    to: string,
    tokenKey: string,
    amount: bigint,
    srcChainId: bigint,
    destChainId: bigint
  ] & {
    nonce: bigint;
    from: string;
    to: string;
    tokenKey: string;
    amount: bigint;
    srcChainId: bigint;
    destChainId: bigint;
  };

  export type TransferExecutionDetailsStruct = {
    to: AddressLike;
    amount: BigNumberish;
    nonce: BigNumberish;
    tokenKey: BytesLike;
    srcChainId: BigNumberish;
    tokenMetadata: IBridge.TokenMetadataStruct;
  };

  export type TransferExecutionDetailsStructOutput = [
    to: string,
    amount: bigint,
    nonce: bigint,
    tokenKey: string,
    srcChainId: bigint,
    tokenMetadata: IBridge.TokenMetadataStructOutput
  ] & {
    to: string;
    amount: bigint;
    nonce: bigint;
    tokenKey: string;
    srcChainId: bigint;
    tokenMetadata: IBridge.TokenMetadataStructOutput;
  };
}

export interface BridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUTHORITY_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_CONFIRMATION_LENGTH"
      | "PAUSER_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "bridgeNonce"
      | "executeTransferRequests"
      | "getAdmin"
      | "getAuthority"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isPaused"
      | "metadataForToken"
      | "pause"
      | "paused"
      | "processedTransfers"
      | "proxiableUUID"
      | "renounceRole"
      | "requestTransfer"
      | "revokeRole"
      | "setAuthority"
      | "setStakingManager"
      | "stakingManager"
      | "supportsInterface"
      | "tokensInfo"
      | "transferRequests"
      | "unpause"
      | "updateWhitelistStatus"
      | "upgradeToAndCall"
      | "whitelistToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "NewTokenWhitelisted"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TokenWhitelistStatusUpdated"
      | "TokenWrapped"
      | "TransferRequestExecuted"
      | "TransferRequested"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AUTHORITY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CONFIRMATION_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransferRequests",
    values: [IBridge.TransferExecutionDetailsStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAuthority",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "metadataForToken",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processedTransfers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTransfer",
    values: [BytesLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateWhitelistStatus",
    values: [BytesLike, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistToken",
    values: [BytesLike, boolean, AddressLike, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUTHORITY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CONFIRMATION_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransferRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "metadataForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processedTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokensInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelistStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistToken",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewTokenWhitelistedEvent {
  export type InputTuple = [
    tokenKey: BytesLike,
    tokenInfo: IBridge.TokenInfoStruct,
    tokenMetadata: IBridge.TokenMetadataStruct
  ];
  export type OutputTuple = [
    tokenKey: string,
    tokenInfo: IBridge.TokenInfoStructOutput,
    tokenMetadata: IBridge.TokenMetadataStructOutput
  ];
  export interface OutputObject {
    tokenKey: string;
    tokenInfo: IBridge.TokenInfoStructOutput;
    tokenMetadata: IBridge.TokenMetadataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenWhitelistStatusUpdatedEvent {
  export type InputTuple = [
    tokenKey: BytesLike,
    tokenInfo: IBridge.TokenInfoStruct
  ];
  export type OutputTuple = [
    tokenKey: string,
    tokenInfo: IBridge.TokenInfoStructOutput
  ];
  export interface OutputObject {
    tokenKey: string;
    tokenInfo: IBridge.TokenInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenWrappedEvent {
  export type InputTuple = [
    tokenKey: BytesLike,
    wrappedToken: AddressLike,
    isWhitelisted: boolean,
    tokenMetadata: IBridge.TokenMetadataStruct
  ];
  export type OutputTuple = [
    tokenKey: string,
    wrappedToken: string,
    isWhitelisted: boolean,
    tokenMetadata: IBridge.TokenMetadataStructOutput
  ];
  export interface OutputObject {
    tokenKey: string;
    wrappedToken: string;
    isWhitelisted: boolean;
    tokenMetadata: IBridge.TokenMetadataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferRequestExecutedEvent {
  export type InputTuple = [nonce: BigNumberish, srcChainId: BigNumberish];
  export type OutputTuple = [nonce: bigint, srcChainId: bigint];
  export interface OutputObject {
    nonce: bigint;
    srcChainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferRequestedEvent {
  export type InputTuple = [request: IBridge.TransferRequestStruct];
  export type OutputTuple = [request: IBridge.TransferRequestStructOutput];
  export interface OutputObject {
    request: IBridge.TransferRequestStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Bridge extends BaseContract {
  connect(runner?: ContractRunner | null): Bridge;
  waitForDeployment(): Promise<this>;

  interface: BridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUTHORITY_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_CONFIRMATION_LENGTH: TypedContractMethod<[], [bigint], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  bridgeNonce: TypedContractMethod<[], [bigint], "view">;

  executeTransferRequests: TypedContractMethod<
    [batch: IBridge.TransferExecutionDetailsStruct[]],
    [void],
    "nonpayable"
  >;

  getAdmin: TypedContractMethod<[], [string], "view">;

  getAuthority: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [_authority: AddressLike, _admin: AddressLike],
    [void],
    "nonpayable"
  >;

  isPaused: TypedContractMethod<[], [boolean], "view">;

  metadataForToken: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint] & {
        name: string;
        symbol: string;
        decimals: bigint;
      }
    ],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  processedTransfers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  requestTransfer: TypedContractMethod<
    [
      tokenKey: BytesLike,
      to: AddressLike,
      amount: BigNumberish,
      destChainId: BigNumberish
    ],
    [void],
    "payable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setAuthority: TypedContractMethod<
    [_authority: AddressLike],
    [void],
    "nonpayable"
  >;

  setStakingManager: TypedContractMethod<
    [_stakingManager: AddressLike],
    [void],
    "nonpayable"
  >;

  stakingManager: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokensInfo: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, boolean, boolean, boolean] & {
        tokenAddress: string;
        managed: boolean;
        enabled: boolean;
        supported: boolean;
      }
    ],
    "view"
  >;

  transferRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, bigint, bigint] & {
        nonce: bigint;
        from: string;
        to: string;
        tokenKey: string;
        amount: bigint;
        srcChainId: bigint;
        destChainId: bigint;
      }
    ],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateWhitelistStatus: TypedContractMethod<
    [tokenKey: BytesLike, enabled: boolean, tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  whitelistToken: TypedContractMethod<
    [
      tokenKey: BytesLike,
      enabled: boolean,
      tokenAddress: AddressLike,
      tokenSymbol: string,
      tokenName: string,
      tokenDecimals: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUTHORITY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_CONFIRMATION_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bridgeNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeTransferRequests"
  ): TypedContractMethod<
    [batch: IBridge.TransferExecutionDetailsStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAuthority"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_authority: AddressLike, _admin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "metadataForToken"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint] & {
        name: string;
        symbol: string;
        decimals: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "processedTransfers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestTransfer"
  ): TypedContractMethod<
    [
      tokenKey: BytesLike,
      to: AddressLike,
      amount: BigNumberish,
      destChainId: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthority"
  ): TypedContractMethod<[_authority: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStakingManager"
  ): TypedContractMethod<[_stakingManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakingManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokensInfo"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, boolean, boolean, boolean] & {
        tokenAddress: string;
        managed: boolean;
        enabled: boolean;
        supported: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, bigint, bigint] & {
        nonce: bigint;
        from: string;
        to: string;
        tokenKey: string;
        amount: bigint;
        srcChainId: bigint;
        destChainId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateWhitelistStatus"
  ): TypedContractMethod<
    [tokenKey: BytesLike, enabled: boolean, tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "whitelistToken"
  ): TypedContractMethod<
    [
      tokenKey: BytesLike,
      enabled: boolean,
      tokenAddress: AddressLike,
      tokenSymbol: string,
      tokenName: string,
      tokenDecimals: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewTokenWhitelisted"
  ): TypedContractEvent<
    NewTokenWhitelistedEvent.InputTuple,
    NewTokenWhitelistedEvent.OutputTuple,
    NewTokenWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TokenWhitelistStatusUpdated"
  ): TypedContractEvent<
    TokenWhitelistStatusUpdatedEvent.InputTuple,
    TokenWhitelistStatusUpdatedEvent.OutputTuple,
    TokenWhitelistStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenWrapped"
  ): TypedContractEvent<
    TokenWrappedEvent.InputTuple,
    TokenWrappedEvent.OutputTuple,
    TokenWrappedEvent.OutputObject
  >;
  getEvent(
    key: "TransferRequestExecuted"
  ): TypedContractEvent<
    TransferRequestExecutedEvent.InputTuple,
    TransferRequestExecutedEvent.OutputTuple,
    TransferRequestExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TransferRequested"
  ): TypedContractEvent<
    TransferRequestedEvent.InputTuple,
    TransferRequestedEvent.OutputTuple,
    TransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewTokenWhitelisted(bytes32,tuple,tuple)": TypedContractEvent<
      NewTokenWhitelistedEvent.InputTuple,
      NewTokenWhitelistedEvent.OutputTuple,
      NewTokenWhitelistedEvent.OutputObject
    >;
    NewTokenWhitelisted: TypedContractEvent<
      NewTokenWhitelistedEvent.InputTuple,
      NewTokenWhitelistedEvent.OutputTuple,
      NewTokenWhitelistedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TokenWhitelistStatusUpdated(bytes32,tuple)": TypedContractEvent<
      TokenWhitelistStatusUpdatedEvent.InputTuple,
      TokenWhitelistStatusUpdatedEvent.OutputTuple,
      TokenWhitelistStatusUpdatedEvent.OutputObject
    >;
    TokenWhitelistStatusUpdated: TypedContractEvent<
      TokenWhitelistStatusUpdatedEvent.InputTuple,
      TokenWhitelistStatusUpdatedEvent.OutputTuple,
      TokenWhitelistStatusUpdatedEvent.OutputObject
    >;

    "TokenWrapped(bytes32,address,bool,tuple)": TypedContractEvent<
      TokenWrappedEvent.InputTuple,
      TokenWrappedEvent.OutputTuple,
      TokenWrappedEvent.OutputObject
    >;
    TokenWrapped: TypedContractEvent<
      TokenWrappedEvent.InputTuple,
      TokenWrappedEvent.OutputTuple,
      TokenWrappedEvent.OutputObject
    >;

    "TransferRequestExecuted(uint256,uint64)": TypedContractEvent<
      TransferRequestExecutedEvent.InputTuple,
      TransferRequestExecutedEvent.OutputTuple,
      TransferRequestExecutedEvent.OutputObject
    >;
    TransferRequestExecuted: TypedContractEvent<
      TransferRequestExecutedEvent.InputTuple,
      TransferRequestExecutedEvent.OutputTuple,
      TransferRequestExecutedEvent.OutputObject
    >;

    "TransferRequested(tuple)": TypedContractEvent<
      TransferRequestedEvent.InputTuple,
      TransferRequestedEvent.OutputTuple,
      TransferRequestedEvent.OutputObject
    >;
    TransferRequested: TypedContractEvent<
      TransferRequestedEvent.InputTuple,
      TransferRequestedEvent.OutputTuple,
      TransferRequestedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IStakeManager,
  IStakeManagerInterface,
} from "../../../contracts/interfaces/IStakeManager";

const _abi = [
  {
    inputs: [],
    name: "InsufficientStakedBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAdmin",
    type: "error",
  },
  {
    inputs: [],
    name: "NotBridge",
    type: "error",
  },
  {
    inputs: [],
    name: "RewardRecipientAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "RewardRecipientNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "StakingFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "UnstakingFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "lastStakingBlock",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "stakingEpochId",
        type: "uint64",
      },
    ],
    name: "FundsStakedOnPrecompile",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensStaked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensUnstaked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "rewardAddress",
        type: "address",
      },
    ],
    name: "addBridgeParticipantReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "rewardAddress",
        type: "address",
      },
    ],
    name: "removeBridgeParticipantReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IStakeManager__factory {
  static readonly abi = _abi;
  static createInterface(): IStakeManagerInterface {
    return new Interface(_abi) as IStakeManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IStakeManager {
    return new Contract(address, _abi, runner) as unknown as IStakeManager;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IBridge,
  IBridgeInterface,
} from "../../../contracts/interfaces/IBridge";

const _abi = [
  {
    inputs: [],
    name: "BridgePaused",
    type: "error",
  },
  {
    inputs: [],
    name: "ETHTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientTokensLocked",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAdmin",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAuthority",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidDestinationChain",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInput",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidRecipient",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSender",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTokenMetadata",
    type: "error",
  },
  {
    inputs: [],
    name: "NotBridgeAuthority",
    type: "error",
  },
  {
    inputs: [],
    name: "StakingManagerNotSet",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenAlreadyWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenNotWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferAlreadyProcessed",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "UnauthorizedTransfer",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "tokenKey",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "bool",
            name: "managed",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "enabled",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "supported",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct IBridge.TokenInfo",
        name: "tokenInfo",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "decimals",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct IBridge.TokenMetadata",
        name: "tokenMetadata",
        type: "tuple",
      },
    ],
    name: "NewTokenWhitelisted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "tokenKey",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "bool",
            name: "managed",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "enabled",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "supported",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct IBridge.TokenInfo",
        name: "tokenInfo",
        type: "tuple",
      },
    ],
    name: "TokenWhitelistStatusUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "tokenKey",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "wrappedToken",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "isWhitelisted",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "decimals",
            type: "uint8",
          },
        ],
        indexed: false,
        internalType: "struct IBridge.TokenMetadata",
        name: "tokenMetadata",
        type: "tuple",
      },
    ],
    name: "TokenWrapped",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "srcChainId",
        type: "uint64",
      },
    ],
    name: "TransferRequestExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "tokenKey",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "srcChainId",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "destChainId",
            type: "uint64",
          },
        ],
        indexed: false,
        internalType: "struct IBridge.TransferRequest",
        name: "request",
        type: "tuple",
      },
    ],
    name: "TransferRequested",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "tokenKey",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "srcChainId",
            type: "uint64",
          },
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "symbol",
                type: "string",
              },
              {
                internalType: "uint8",
                name: "decimals",
                type: "uint8",
              },
            ],
            internalType: "struct IBridge.TokenMetadata",
            name: "tokenMetadata",
            type: "tuple",
          },
        ],
        internalType: "struct IBridge.TransferExecutionDetails[]",
        name: "batch",
        type: "tuple[]",
      },
    ],
    name: "executeTransferRequests",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAuthority",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "tokenKey",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "destinationChainId",
        type: "uint64",
      },
    ],
    name: "requestTransfer",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IStakeManager",
        name: "stakingManager",
        type: "address",
      },
    ],
    name: "setStakingManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "tokenKey",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "updateWhitelistStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "tokenKey",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "tokenSymbol",
        type: "string",
      },
      {
        internalType: "string",
        name: "tokenName",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "tokenDecimals",
        type: "uint8",
      },
    ],
    name: "whitelistToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IBridge__factory {
  static readonly abi = _abi;
  static createInterface(): IBridgeInterface {
    return new Interface(_abi) as IBridgeInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IBridge {
    return new Contract(address, _abi, runner) as unknown as IBridge;
  }
}
